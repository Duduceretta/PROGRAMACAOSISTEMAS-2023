linhas_do_programa = []
dados_de_execucao = []
rotulos = {}



#Iago Vargas 
#Trabalho
#https://replit.com/@Vargasfinalboss/Trabalho-Python-Manha-0712#main.py


def exibir_estado_memoria():
    global dados_de_execucao
    print(dados_de_execucao)

def inicializar_memoria():
    global dados_de_execucao
    for _ in range(10):
        dados_de_execucao.append(0)
    return dados_de_execucao

def executar_comando(comando):
    elementos = comando.split(' ')

    if len(elementos) == 3:
        if elementos[1] == 'JMP':
            return int(elementos[2]) - 1

        if elementos[1] == 'CALL':
            return int(rotulos[elementos[2]]) - 1

        parametros = elementos[2].split(',')
        parametro1 = parametros[0]
        parametro2 = parametros[1]
        posicao_destino = int(parametro1[1:])

        if elementos[1] == 'CMP':
            valor_origem = dados_de_execucao[int(parametro2[1:])] if parametro2.startswith('R') else int(parametro2)
            if dados_de_execucao[posicao_destino] == valor_origem:
                return int(elementos[0])
            else:
                return int(elementos[0]) + 1

        if elementos[1] == 'LOAD':
            if parametro2.startswith('R'):
                dados_de_execucao[posicao_destino] = dados_de_execucao[int(parametro2[1:])]
            else:
                dados_de_execucao[posicao_destino] = int(parametro2)

        if elementos[1] == 'ADD':
            if parametro2.startswith('R'):
                dados_de_execucao[posicao_destino] += dados_de_execucao[int(parametro2[1:])]
            else:
                dados_de_execucao[posicao_destino] += int(parametro2)

        if elementos[1] == 'SUB':
            if parametro2.startswith('R'):
                dados_de_execucao[posicao_destino] -= dados_de_execucao[int(parametro2[1:])]
            else:
                dados_de_execucao[posicao_destino] -= int(parametro2)

        if elementos[1] == 'MULT':
            if parametro2.startswith('R'):
                dados_de_execucao[posicao_destino] *= dados_de_execucao[int(parametro2[1:])]
            else:
                dados_de_execucao[posicao_destino] *= int(parametro2)

        if elementos[1] == 'DIV':
            if parametro2.startswith('R'):
                if dados_de_execucao[int(parametro2[1:])] != 0:
                    dados_de_execucao[posicao_destino] //= dados_de_execucao[int(parametro2[1:])]
                else:
                    print('Divisão por zero. ERRO')
                    return -1
            else:
                if int(parametro2) != 0:
                    dados_de_execucao[posicao_destino] //= int(parametro2)
                else:
                    print('Divisão por zero. ERRO')
                    return -1

        exibir_estado_memoria()

    if elementos[1] == 'HALT':
        print('FIM DO PROGRAMA.')
        return -1

    return int(elementos[0])

def executar_programa():
    try:
        numero_linha = 0
        nome_linha = 0
        ponto_inicio_main = rotulos['main']

        for linha in linhas_do_programa:
            if linha.startswith(ponto_inicio_main):
                numero_linha = executar_comando(linha)
                break

        while numero_linha != -1:
            if numero_linha is not None:
                nome_linha = '0' + str(numero_linha + 1) if (numero_linha + 1) <= 9 else str(numero_linha + 1)

            for linha in linhas_do_programa:
                if linha.startswith(nome_linha):
                    numero_linha = executar_comando(linha)
                    break

    except IndexError:
        cont_rotulos = 0
        flag_main = False

        for linha in linhas_do_programa:
            elementos = linha.split(' ')
            if len(elementos) == 1 and elementos[0].endswith(':'):
                elementos[0] = elementos[0].replace(':', '')
                cont_rotulos += 1
                if elementos[0] == 'main':
                    flag_main = True

        if not flag_main:
            print("O input não contém 'main'.", Exception.__name__)
            return Exception.__name__

    except KeyError:
        cont_rotulos = 0
        flag_main = False

        for linha in linhas_do_programa:
            elementos = linha.split(' ')
            if len(elementos) == 1 and elementos[0].endswith(':'):
                elementos[0] = elementos[0].replace(':', '')
                cont_rotulos += 1
                if elementos[0] == 'main':
                    flag_main = True

        if not flag_main:
            print("O input não contém 'main'.", Exception.__name__)
            return Exception.__name__

def ler_arquivo_programa(nome_arquivo):
    global rotulos
    with open(nome_arquivo) as arquivo:
        flag_rotulo = False
        nome_rotulo = None
        for linha in arquivo:
            elementos = linha.rstrip().split(' ')

            if flag_rotulo:
                rotulos[nome_rotulo] = elementos[0]
                flag_rotulo = False
            if linha.rstrip().endswith(':'):  
                flag_rotulo = True
                nome_rotulo = linha[:len(linha) - 2]
            linhas_do_programa.append(linha.rstrip())

def exibir_linhas_programa():
    global linhas_do_programa
    for i in range(len(linhas_do_programa)):
        print(linhas_do_programa[i])

def programa_principal():
    inicializar_memoria()
    exibir_estado_memoria()
    nome_arquivo_programa = input('Digite o nome do arquivo do programa: ')
    print('\n')
    ler_arquivo_programa(nome_arquivo_programa)
    exibir_linhas_programa()
    print(f'\n\nRótulos: {rotulos}')
    executar_programa()

if __name__ == '__main__':
    programa_principal()
